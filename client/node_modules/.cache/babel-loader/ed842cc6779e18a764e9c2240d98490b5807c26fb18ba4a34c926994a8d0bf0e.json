{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\New folder (2)\\\\client\\\\src\\\\screens\\\\message.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, Component } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst MessageScreen = _ref => {\n  _s();\n  let {\n    socket,\n    user\n  } = _ref;\n  function sendMessage(message) {\n    if (message != \"\") {\n      fetch(\"http://localhost:5000/messages\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          name: user,\n          message: message\n        })\n      });\n      setMessage(\"\");\n    }\n  }\n  const [messages, setMessages] = useState([]);\n  const [message, setMessage] = useState(\"\");\n  useEffect(() => {\n    fetch(\"http://localhost:5000/messages\").then(res => res.json()).then(data => setMessages(data));\n  }, []);\n  useEffect(() => {\n    socket.on(\"message\", data => {\n      setMessages([...messages, data]);\n    });\n  }, [socket, messages]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.messages,\n      children: messages.map((message, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.message,\n        children: [message.name, \" : \", message.message]\n      }, \"message_\" + i.toString(), true, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      value: message,\n      onChange: e => setMessage(e.target.value),\n      type: \"text\",\n      style: styles.input\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => sendMessage(message),\n      style: styles.send,\n      children: \"Send\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(MessageScreen, \"jpGPcXz2spHM0alBE17HyVw7Ptg=\");\n_c = MessageScreen;\nconst styles = {\n  main: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    height: \"100vh\",\n    background: \"linear-gradient(to right, #5f2c82, #49a09d)\"\n  },\n  form: {\n    height: \"40rem\",\n    width: \"30rem\",\n    background: \"rgba(0, 0, 0, 0.3)\",\n    borderRadius: \"0.5rem\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  },\n  input: {\n    background: \"#00000069\",\n    color: \"white\",\n    padding: \".4rem\",\n    display: \"block\",\n    width: \"80%\",\n    marginBottom: \"1rem\",\n    fontSize: \"1.2rem\"\n  },\n  send: {\n    fontSize: \"1.2rem\",\n    display: \"block\",\n    background: \"rgb(165 45 255)\",\n    borderRadius: \"0.5rem\",\n    padding: \".4rem\",\n    width: \"50%\",\n    cursor: \"pointer\"\n  },\n  messages: {\n    height: \"25rem\",\n    width: \"80%\",\n    padding: \"0.8rem\",\n    overflowY: \"scroll\",\n    background: \"#00000069\",\n    marginBottom: \"1rem\"\n  },\n  message: {\n    color: \"white\",\n    fontSize: \"1.2rem\"\n  }\n};\nexport default MessageScreen;\nvar _c;\n$RefreshReg$(_c, \"MessageScreen\");","map":{"version":3,"names":["React","useState","useEffect","Component","jsxDEV","_jsxDEV","Fragment","_Fragment","MessageScreen","_ref","_s","socket","user","sendMessage","message","fetch","method","headers","body","JSON","stringify","name","setMessage","messages","setMessages","then","res","json","data","on","children","style","styles","map","i","toString","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","type","input","onClick","send","_c","main","display","justifyContent","alignItems","height","background","form","width","borderRadius","flexDirection","color","padding","marginBottom","fontSize","cursor","overflowY","$RefreshReg$"],"sources":["C:/Users/User/Desktop/New folder (2)/client/src/screens/message.jsx"],"sourcesContent":["import React, { useState, useEffect, Component } from \"react\";\r\nconst MessageScreen = ({ socket,user }) => {\r\n  function sendMessage(message) {\r\n    if (message != \"\") {\r\n      fetch(\"http://localhost:5000/messages\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ name: user, message: message }),\r\n      });\r\n      setMessage(\"\");\r\n    }\r\n  }\r\n  const [messages, setMessages] = useState([]);\r\n  const [message, setMessage] = useState(\"\");\r\n  useEffect(() => {\r\n    fetch(\"http://localhost:5000/messages\")\r\n      .then((res) => res.json())\r\n      .then((data) => setMessages(data));\r\n  }, []);\r\n  useEffect(() => {\r\n    socket.on(\"message\", (data) => {\r\n      setMessages([...messages, data]);\r\n    });\r\n  }, [socket, messages]);\r\n  return (\r\n    <>\r\n      <div style={styles.messages}>\r\n        {messages.map((message,i) => (\r\n          <div key={\"message_\"+i.toString()} style={styles.message}>\r\n            {message.name} : {message.message}\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <input\r\n        value={message}\r\n        onChange={(e) => setMessage(e.target.value)}\r\n        type=\"text\"\r\n        style={styles.input}\r\n      />\r\n      <button onClick={() => sendMessage(message)} style={styles.send}>\r\n        Send\r\n      </button>\r\n    </>\r\n  );\r\n};\r\n\r\nconst styles = {\r\n  main: {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    height: \"100vh\",\r\n    background: \"linear-gradient(to right, #5f2c82, #49a09d)\",\r\n  },\r\n  form: {\r\n    height: \"40rem\",\r\n    width: \"30rem\",\r\n    background: \"rgba(0, 0, 0, 0.3)\",\r\n    borderRadius: \"0.5rem\",\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n  },\r\n  input: {\r\n    background: \"#00000069\",\r\n    color: \"white\",\r\n    padding: \".4rem\",\r\n    display: \"block\",\r\n    width: \"80%\",\r\n    marginBottom: \"1rem\",\r\n    fontSize: \"1.2rem\",\r\n  },\r\n  send: {\r\n    fontSize: \"1.2rem\",\r\n    display: \"block\",\r\n    background: \"rgb(165 45 255)\",\r\n    borderRadius: \"0.5rem\",\r\n    padding: \".4rem\",\r\n    width: \"50%\",\r\n    cursor: \"pointer\",\r\n  },\r\n  messages: {\r\n    height: \"25rem\",\r\n    width: \"80%\",\r\n    padding: \"0.8rem\",\r\n    overflowY: \"scroll\",\r\n    background: \"#00000069\",\r\n    marginBottom: \"1rem\",\r\n  },\r\n  message: {\r\n    color: \"white\",\r\n    fontSize: \"1.2rem\",\r\n  },\r\n};\r\n\r\nexport default MessageScreen;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}